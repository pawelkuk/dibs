version: "3"
services:
  haproxy:
    image: haproxy
    ports:
      - "80:80"
      - "70:70"
    volumes:
      - ./resources/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - app
      - app_read

  app_read:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=postgres
      - API_HOST=app
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./src/:/src/
      - ./resources/uwsgi.ini:/src/api/uwsgi.ini
    ports:
      - 5006:80
    stdin_open: true
    # command: sleep 9999
    tty: true
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=postgres
      - API_HOST=app
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./src/:/src/
      - ./resources/uwsgi.ini:/src/api/uwsgi.ini
    ports:
      - 5005:80
    stdin_open: true
    # command: sleep 9999
    tty: true

  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    volumes:
      - ./volumes/postgres:/var/lib/postgresql


  postgres_booking:
    image: postgres
    command: postgres -c config_file=/etc/postgresql.conf
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5435:5432
    volumes:
      - ./volumes/postgres_booking:/var/lib/postgresql
      - ./resources/postgresql-coordinator.conf:/etc/postgresql.conf

  postgres_ticketing:
    image: postgres
    command: postgres -c config_file=/etc/postgresql.conf
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5433:5432
    volumes:
      - ./volumes/postgres_ticketing:/var/lib/postgresql
      - ./resources/postgresql-participant.conf:/etc/postgresql.conf

  postgres_paying:
    image: postgres
    command: postgres -c config_file=/etc/postgresql.conf
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5434:5432
    volumes:
      - ./volumes/postgres_paying:/var/lib/postgresql
      - ./resources/postgresql-participant.conf:/etc/postgresql.conf

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: pass1234
    ports:
      - 5050:80
    depends_on:
      - postgres
      - postgres_booking
      - postgres_ticketing
      - postgres_paying
    volumes:
      - ./src/server.json:/pgadmin/server.json

  celery:
    build: .
    command: ["/bin/bash", "-ec", "watchmedo auto-restart --directory=. --patterns=*.py --recursive -- celery -A api worker -B -l info -Q celery"]
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=postgres
      - API_HOST=app
      - PYTHONDONTWRITEBYTECODE=1
      - C_FORCE_ROOT=1
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./src/:/src/

  rabbitmq:
      image: rabbitmq:management
      environment:
        - RABBITMQ_DEFAULT_USER=guest
        - RABBITMQ_DEFAULT_PASS=guest
      ports:
        - 5672:5672
        - 15672:15672
      volumes:
        - ./volumes/rabbitmq/:/var/lib/rabbitmq/mnesia/

  frontend:
    build: ./frontend
    command: npm start
    ports:
      - 3000:3000                                                                                                     
    environment:
      - CI=true
    volumes:
      - ./frontend:/frontend

  read_model:
    build: ./read-model
    command: nodemon --inspect server.js
    ports:
      - 3001:3001
      - 9229:9229
    volumes:
      - ./read-model:/read-model
    depends_on:
      - app
    stdin_open: true
    tty: true

  benchmark:
    build: ./benchmark
    entrypoint: tail -f /dev/null
    volumes:
      - ./benchmark:/benchmark
      - ./experiments:/data
    depends_on:
      - app
    stdin_open: true
    tty: true
